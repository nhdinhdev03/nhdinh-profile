import React, { useEffect, useState } from "react";
import PropTypes from "prop-types";

import "./Sections.scss";
import { useUserTheme } from "theme";

// Optimized GitHub data hook
const useGithubData = () => {
  const [data, setData] = useState({
    profile: null,
    repos: [],
    loading: true,
    error: null,
  });

  useEffect(() => {
    let ignore = false;
    const ctrl = new AbortController();

    async function fetchData() {
      try {
        const [profileRes, reposRes] = await Promise.all([
          fetch("https://api.github.com/users/nhdinhdev03", {
            signal: ctrl.signal,
            headers: { Accept: "application/vnd.github+json" },
          }),
          fetch(
            "https://api.github.com/users/nhdinhdev03/repos?per_page=6&sort=updated",
            {
              signal: ctrl.signal,
              headers: { Accept: "application/vnd.github+json" },
            }
          ),
        ]);

        if (!profileRes.ok || !reposRes.ok) throw new Error("Failed to fetch");

        const [profile, repos] = await Promise.all([
          profileRes.json(),
          reposRes.json(),
        ]);

        if (!ignore) {
          setData({
            profile,
            repos: Array.isArray(repos) ? repos.filter((r) => !r.archived) : [],
            loading: false,
            error: null,
          });
        }
      } catch (error) {
        if (!ignore && error.name !== "AbortError") {
          setData((prev) => ({ ...prev, loading: false, error }));
        }
      }
    }

    fetchData();
    return () => {
      ignore = true;
      ctrl.abort();
    };
  }, []);

  return data;
};

const ProfileHero = ({ profile, light }) => (
  <section className="profile-hero">
    <div className="profile-image">
      <img src={profile?.avatar_url || "/default-avatar.png"} alt="Profile" />
      <div className="profile-status">
        <span className={`status-badge ${light ? "light-mode" : "dark-mode"}`}>
          {light ? "‚òÄÔ∏è Light Mode" : "üåô Dark Mode"}
        </span>
      </div>
    </div>
    <div className="profile-content">
      <h1>
        <span className="name-highlight">
          {profile?.name || "Nguyen Hoang Dinh"}
        </span>
      </h1>
      <p className="title">L·∫≠p Tr√¨nh Vi√™n & K·ªπ Thu·∫≠t Ph·∫ßn M·ªÅm</p>
      <p className="description">
        <span className="highlight-primary">
          Bi·∫øn √Ω t∆∞·ªüng th√†nh nh·ªØng s·∫£n ph·∫©m tinh x·∫£o
        </span>
        {" ‚Äî chuy√™n v·ªÅ "}
        <span className="highlight-secondary">JavaScript/TypeScript front-end</span>
        {" v√† "}
        <span className="highlight-accent">ph√°t tri·ªÉn API back-end</span>.
        <br />
        <span className="highlight-primary">ƒêam m√™ h·ªçc c√¥ng ngh·ªá m·ªõi</span>
        {", thi·∫øt k·∫ø ki·∫øn tr√∫c s·∫°ch v√† "}
        <span className="highlight-secondary">
          t·ªëi ∆∞u h√≥a tr·∫£i nghi·ªám ng∆∞·ªùi d√πng
        </span>
        .
        <br />
        <span className="highlight-accent">
          Khi kh√¥ng l·∫≠p tr√¨nh, t√¥i kh√°m ph√° thi·∫øt k·∫ø h·ªá th·ªëng
        </span>
        {" v√† c·∫£i thi·ªán k·ªπ nƒÉng DevOps. "}
        <span className="italic">
          {profile?.bio ||
            "C√≥ kinh nghi·ªám v·ªõi React, Node.js v√† c√¥ng ngh·ªá ƒë√°m m√¢y v·ªõi t√¢m huy·∫øt v·ªÅ code s·∫°ch v√† c√≥ th·ªÉ m·ªü r·ªông."}
        </span>
      </p>
      <div className="profile-badges">
        <span className="badge badge-green">S·∫µn S√†ng L√†m Vi·ªác</span>
        <span className="badge badge-blue">Full-Stack Developer</span>
        <span className="badge badge-orange">System Design</span>
      </div>
    </div>
  </section>
);

ProfileHero.propTypes = {
  profile: PropTypes.shape({
    avatar_url: PropTypes.string,
    name: PropTypes.string,
    bio: PropTypes.string,
    html_url: PropTypes.string,
  }),
  light: PropTypes.bool.isRequired,
};

// Quick Stats Section
const QuickStats = ({ repos, profile }) => {
  const stats = [
    { number: repos?.length || 0, label: "D·ª± √Ån", icon: "üöÄ" },
    { number: profile?.followers || 0, label: "Ng∆∞·ªùi Theo D√µi", icon: "üë•" },
    { number: profile?.following || 0, label: "ƒêang Theo D√µi", icon: "ü§ù" },
    { number: profile?.public_repos || 0, label: "Kho M√£ Ngu·ªìn", icon: "üìÅ" },
  ];

  return (
    <section className="quick-stats">
      {stats.map((stat, index) => (
        <div key={index} className="stat-card">
          <div className="stat-icon">{stat.icon}</div>
          <div className="stat-number">{stat.number}</div>
          <div className="stat-label">{stat.label}</div>
        </div>
      ))}
    </section>
  );
};

QuickStats.propTypes = {
  repos: PropTypes.arrayOf(PropTypes.object),
  profile: PropTypes.shape({
    followers: PropTypes.number,
    following: PropTypes.number,
    public_repos: PropTypes.number,
  }),
};

// Skills Overview Section
const SkillsOverview = () => {
  const skillCategories = [
    {
      title: "Frontend",
      icon: "üé®",
      skills: [
        "React",
        "JavaScript",
        "TypeScript",
        "Vue.js",
        "HTML5",
        "CSS3",
        "Tailwind CSS",
        "Sass/SCSS",
      ],
    },
    {
      title: "Backend",
      icon: "‚öôÔ∏è",
      skills: [
        "Java",
        "Spring Boot",
        "Node.js",

        "Express.js",
        "REST API",
        "GraphQL",
      ],
    },
    {
      title: "Database",
      icon: "üóÑÔ∏è",
      skills: ["SQL Server", "PostgreSQL", "MongoDB", "Redis", "MySQL"],
    },
    {
      title: "DevOps & Tools",
      icon: "üõ†Ô∏è",
      skills: ["Docker", "AWS", "Git", "CI/CD", "Linux", "Nginx"],
    },
  ];

  return (
    <section className="skills-overview">
      <h2>K·ªπ NƒÉng C√¥ng Ngh·ªá</h2>
      <div className="skills-grid">
        {skillCategories.map((category, index) => (
          <div key={index} className="skill-category">
            <div className="category-header">
              <span className="category-icon">{category.icon}</span>
              <h3>{category.title}</h3>
            </div>
            <div className="skill-list">
              {category.skills.map((skill, skillIndex) => (
                <span key={skillIndex} className="skill-tag">
                  {skill}
                </span>
              ))}
            </div>
          </div>
        ))}
      </div>
    </section>
  );
};

// Recent Projects Section
const RecentProjects = ({ repos }) => {
  const featuredRepos = repos?.slice(0, 6) || [];

  return (
    <section className="recent-projects">
      <h2>D·ª± √Ån G·∫ßn ƒê√¢y</h2>
      <div className="projects-grid">
        {featuredRepos.map((repo, index) => (
          <div key={index} className="project-card">
            <div className="project-header">
              <div className="project-icon">üìÅ</div>
              <div className="project-status">
                {repo.private ? (
                  <span className="private-badge">üîí Private</span>
                ) : (
                  <span className="public-badge">üåç Public</span>
                )}
              </div>
            </div>
            <div className="project-content">
              <h3>{repo.name}</h3>
              <p className="project-description">
                {repo.description || "Kh√¥ng c√≥ m√¥ t·∫£"}
              </p>
              <div className="project-tech">
                {repo.language && (
                  <span className="tech-tag primary">{repo.language}</span>
                )}
                <span className="tech-tag stars">
                  <span className="stat-indicator stars">
                    ‚≠ê {repo.stargazers_count}
                  </span>
                </span>
                <span className="tech-tag forks">
                  <span className="stat-indicator forks">
                    üîÄ {repo.forks_count}
                  </span>
                </span>
              </div>
              <div className="project-links">
                <a
                  href={repo.html_url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="project-link primary"
                >
                  Xem Code
                </a>
                {repo.homepage && (
                  <a
                    href={repo.homepage}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="project-link secondary"
                  >
                    Demo Tr·ª±c Ti·∫øp
                  </a>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </section>
  );
};

// Experience Timeline Section
const ExperienceTimeline = () => {
  const experiences = [
    {
      date: "2023 - Hi·ªán t·∫°i",
      title: "L·∫≠p Tr√¨nh Vi√™n Web Developer",
      company: "Tech Solutions Inc.",
      description:
        "D·∫´n d·∫Øt ph√°t tri·ªÉn c√°c ·ª©ng d·ª•ng web c√≥ th·ªÉ m·ªü r·ªông s·ª≠ d·ª•ng React v√† Java. H∆∞·ªõng d·∫´n c√°c l·∫≠p tr√¨nh vi√™n junior v√† tri·ªÉn khai c√°c ph∆∞∆°ng ph√°p hay nh·∫•t.",
    },
    {
      date: "2021 - 2023",
      title: "L·∫≠p Tr√¨nh Vi√™n Backend",
      company: "Digital Innovation Co.",
      description:
        "Ph√°t tri·ªÉn v√† duy tr√¨ nhi·ªÅu d·ª± √°n kh√°ch h√†ng s·ª≠ d·ª•ng c√¥ng ngh·ªá web hi·ªán ƒë·∫°i. ",
    },
    {
      date: "2020 - 2021",
      title: "L·∫≠p Tr√¨nh Vi√™n Frontend",
      company: "StartUp Ventures",
      description:
        "X√¢y d·ª±ng c√°c ·ª©ng d·ª•ng web responsive v·ªõi React v√† Vue.js. T·∫≠p trung v√†o tr·∫£i nghi·ªám ng∆∞·ªùi d√πng v√† t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t.",
    },
  ];

  return (
    <section className="experience-timeline">
      <h2>Kinh Nghi·ªám</h2>
      <div className="timeline">
        {experiences.map((exp, index) => (
          <div key={index} className="timeline-item">
            <div className="timeline-date">{exp.date}</div>
            <div className="timeline-title">{exp.title}</div>
            <div className="timeline-company">{exp.company}</div>
            <div className="timeline-description">{exp.description}</div>
          </div>
        ))}
      </div>
    </section>
  );
};

// Contact Section
const ContactSection = ({ profile, light }) => (
  <section className="contact-section">
    <h3>K·∫øt N·ªëi</h3>
    <p>
      T√¥i lu√¥n quan t√¢m ƒë·∫øn vi·ªác nghe v·ªÅ nh·ªØng c∆° h·ªôi m·ªõi v√† c√°c d·ª± √°n th√∫ v·ªã.
      H√£y li√™n h·ªá n·∫øu b·∫°n mu·ªën h·ª£p t√°c ho·∫∑c ch·ªâ ƒë∆°n gi·∫£n l√† mu·ªën ch√†o h·ªèi!
    </p>
    <div className="contact-badges">
      <a href="mailto:nhdinhdev03@gmail.com" className="contact-badge email">
        Email
      </a>
      <a
        href={profile?.html_url}
        target="_blank"
        rel="noopener noreferrer"
        className="contact-badge github"
      >
        GitHub
      </a>
      <a
        href="https://linkedin.com/in/nhdinhdev03"
        target="_blank"
        rel="noopener noreferrer"
        className="contact-badge linkedin"
      >
        LinkedIn
      </a>
    </div>
    <div className="theme-indicator">
      <div className="theme-status">
        {light
          ? "‚òÄÔ∏è Ch·∫ø ƒê·ªô S√°ng ƒêang Ho·∫°t ƒê·ªông"
          : "üåô Ch·∫ø ƒê·ªô T·ªëi ƒêang Ho·∫°t ƒê·ªông"}
      </div>
    </div>
  </section>
);

// Main About Component
const About = () => {
  const { profile, repos } = useGithubData();
  const { light } = useUserTheme();

  return (
    <div className={`about-page ${light ? "light" : ""}`}>
      <div className="gradient-line" aria-hidden="true" />
      <ProfileHero profile={profile} light={light} />
      <div className="gradient-line" aria-hidden="true" />
      <QuickStats repos={repos} profile={profile} />
      <div className="gradient-line" aria-hidden="true" />
      <SkillsOverview />
      <div className="gradient-line" aria-hidden="true" />
      <RecentProjects repos={repos} />
      <div className="gradient-line" aria-hidden="true" />
      <ExperienceTimeline />
      <div className="gradient-line" aria-hidden="true" />
      <ContactSection profile={profile} light={light} />
    </div>
  );
};

export default About;

// PropTypes definitions - fix existing warnings
RecentProjects.propTypes = {
  repos: PropTypes.arrayOf(
    PropTypes.shape({
      name: PropTypes.string,
      description: PropTypes.string,
      language: PropTypes.string,
      stargazers_count: PropTypes.number,
      forks_count: PropTypes.number,
      html_url: PropTypes.string,
      homepage: PropTypes.string,
      private: PropTypes.bool,
    })
  ),
};

ContactSection.propTypes = {
  profile: PropTypes.shape({
    html_url: PropTypes.string,
  }),
  light: PropTypes.bool.isRequired,
};
