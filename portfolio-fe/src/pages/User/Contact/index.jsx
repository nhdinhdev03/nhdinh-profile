import React, { useState, useCallback, useMemo } from "react";

import { useNotificationContext } from "components/Notification";
import "./Sections.scss";
import userContactMessageApi from "api/user/contact/ContactMessageApi";


function Contact({ email = "nhdinh.dev03@gmail.com", info = {} }) {
  const notification = useNotificationContext();
  
  const [form, setForm] = useState({
    name: "",
    email: "",
    subject: "",
    message: "",
  });
  const [touched, setTouched] = useState({});
  const [status, setStatus] = useState({
    sending: false,
    ok: false,
    error: "",
    apiTried: false,
  });
  const [botField, setBotField] = useState(""); // honeypot
  const [copied, setCopied] = useState(false);

  const onChange = useCallback((e) => {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));
  }, []);
  const onBlur = useCallback((e) => {
    const { name } = e.target;
    setTouched((t) => ({ ...t, [name]: true }));
  }, []);

  const errors = useMemo(() => {
    const errs = {};
    if (!form.name.trim()) errs.name = "H·ªç t√™n l√† b·∫Øt bu·ªôc";
    else if (form.name.trim().length < 2) errs.name = "H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±";
    else if (form.name.trim().length > 100) errs.name = "H·ªç t√™n kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±";
    
    if (!form.email.trim()) errs.email = "Email l√† b·∫Øt bu·ªôc";
    else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(form.email))
      errs.email = "Email kh√¥ng h·ª£p l·ªá";
    else if (form.email.length > 256) errs.email = "Email kh√¥ng ƒë∆∞·ª£c qu√° 256 k√Ω t·ª±";
    
    if (form.subject && form.subject.length > 200) errs.subject = "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c qu√° 200 k√Ω t·ª±";
    
    if (!form.message.trim()) errs.message = "N·ªôi dung tin nh·∫Øn l√† b·∫Øt bu·ªôc";
    else if (form.message.trim().length < 10) errs.message = "Tin nh·∫Øn ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±";
    
    return errs;
  }, [form]);

  const submitViaMailto = useCallback(() => {
    const body = encodeURIComponent(
      `${form.message}\n\n‚Äî ${form.name} <${form.email}>`
    );
    const subject = encodeURIComponent(form.subject || "Li√™n h·ªá t·ª´ portfolio");
    window.location.href = `mailto:${email}?subject=${subject}&body=${body}`;
  }, [form, email]);

  const submitViaAPI = useCallback(async () => {
    try {
      setStatus((s) => ({
        ...s,
        sending: true,
        ok: false,
        error: "",
        apiTried: true,
      }));
      
      await userContactMessageApi.submit(form);
      
      setStatus({ 
        sending: false, 
        ok: true, 
        error: "", 
        apiTried: true 
      });
      
      // Show success notification
      notification.success(
        "üéâ Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! T√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t !.",
        6000,
        {
          title: "G·ª≠i th√†nh c√¥ng",
          actions: [
            {
              label: "G·ª≠i tin nh·∫Øn kh√°c",
              onClick: () => {
                // Form already reset below
              }
            }
          ]
        }
      );
      
      // Reset form after successful submission
      setForm({
        name: "",
        email: "",
        subject: "",
        message: "",
      });
      setTouched({});
      
      return true;
    } catch (error) {
      console.error('Failed to submit contact message:', error);
      
      let errorMessage = "Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau.";
      let errorTitle = "G·ª≠i th·∫•t b·∫°i";
      
      // Handle specific error cases
      if (error.response) {
        const serverMessage = error.response.data?.message;
        
        switch (error.response.status) {
          case 400:
            // Check if it's a rate limiting error specifically
            if (serverMessage && serverMessage.includes("ph√∫t n·ªØa")) {
              // Extract minutes from server message like "Vui l√≤ng ch·ªù 5 ph√∫t n·ªØa"
              const minutesMatch = serverMessage.match(/ch·ªù (\d+) ph√∫t n·ªØa/);
              const minutes = minutesMatch ? minutesMatch[1] : "v√†i";
              errorMessage = `‚è∞ B·∫°n ƒë√£ g·ª≠i tin nh·∫Øn g·∫ßn ƒë√¢y. Vui l√≤ng ch·ªù ${minutes} ph√∫t n·ªØa tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn kh√°c ƒë·ªÉ tr√°nh spam.`;
              errorTitle = `Vui l√≤ng ch·ªù ${minutes} ph√∫t n·ªØa`;
            } else if (serverMessage && serverMessage.includes("15 ph√∫t")) {
              errorMessage = "‚è∞ B·∫°n ƒë√£ g·ª≠i tin nh·∫Øn g·∫ßn ƒë√¢y. Vui l√≤ng ch·ªù 15 ph√∫t tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn kh√°c ƒë·ªÉ tr√°nh spam.";
              errorTitle = "Vui l√≤ng ch·ªù 15 ph√∫t";
            } else if (serverMessage && serverMessage.includes("tr√πng l·∫∑p")) {
              errorMessage = "üìù Tin nh·∫Øn t∆∞∆°ng t·ª± ƒë√£ ƒë∆∞·ª£c g·ª≠i g·∫ßn ƒë√¢y. Vui l√≤ng kh√¥ng g·ª≠i l·∫°i n·ªôi dung tr√πng l·∫∑p.";
              errorTitle = "N·ªôi dung tr√πng l·∫∑p";
            } else {
              errorMessage = serverMessage || "Th√¥ng tin kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c tr∆∞·ªùng.";
              errorTitle = "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá";
            }
            break;
          case 429:
            errorMessage = "‚è∞ B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu tin nh·∫Øn. Vui l√≤ng ch·ªù 15 ph√∫t tr∆∞·ªõc khi g·ª≠i l·∫°i.";
            errorTitle = "Vui l√≤ng ch·ªù 15 ph√∫t";
            break;
          case 500:
            errorMessage = "L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp qua email.";
            errorTitle = "L·ªói h·ªá th·ªëng";
            break;
          default:
            errorMessage = serverMessage || errorMessage;
        }
      } else if (error.request) {
        errorMessage = "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.";
        errorTitle = "L·ªói k·∫øt n·ªëi";
      }
      
      // Show error notification
      const isRateLimited = errorTitle.includes("ph√∫t");
      
      notification.error(
        errorMessage,
        isRateLimited ? 10000 : 8000, // Longer duration for rate limit error
        {
          title: errorTitle,
          actions: isRateLimited ? [
            {
              label: "Hi·ªÉu r·ªìi",
              onClick: () => {
                // Maybe show a countdown timer in the future
              }
            },
            {
              label: "G·ª≠i email tr·ª±c ti·∫øp",
              onClick: () => {
                submitViaMailto();
              }
            }
          ] : [
            {
              label: "Th·ª≠ l·∫°i",
              onClick: () => {
                // Will retry when user clicks submit again
              }
            },
            {
              label: "G·ª≠i email tr·ª±c ti·∫øp",
              onClick: () => {
                submitViaMailto();
              }
            }
          ]
        }
      );
      
      setStatus({
        sending: false,
        ok: false,
        error: errorMessage,
        apiTried: true,
      });
      return false;
    }
  }, [form, notification, submitViaMailto]);

  const copyEmail = useCallback(async () => {
    try {
      if (navigator.clipboard && window.isSecureContext) {
        await navigator.clipboard.writeText(email);
        setCopied(true);
        setTimeout(() => setCopied(false), 1800);
        
        // Show success notification for copy
        notification.success(
          `ƒê√£ sao ch√©p email: ${email}`,
          3000,
          {
            title: "Sao ch√©p th√†nh c√¥ng"
          }
        );
      } else {
        window.location.href = `mailto:${email}`; // fallback
      }
    } catch (error) {
      console.error('Failed to copy email:', error);
      notification.error(
        "Kh√¥ng th·ªÉ sao ch√©p email. ƒê√£ m·ªü ·ª©ng d·ª•ng email thay th·∫ø.",
        4000,
        {
          title: "Sao ch√©p th·∫•t b·∫°i"
        }
      );
      window.location.href = `mailto:${email}`;
    }
  }, [email, notification]);

  const onSubmit = useCallback(
    async (e) => {
      e.preventDefault();
      if (botField) return; // bot protection
      
      // mark all as touched to show errors if any
      setTouched({ name: true, email: true, subject: true, message: true });
      
      if (Object.keys(errors).length) {
        // Show validation error notification
        notification.warning(
          "Vui l√≤ng ki·ªÉm tra v√† ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc tr∆∞·ªõc khi g·ª≠i.",
          5000,
          {
            title: "Th√¥ng tin ch∆∞a ƒë·∫ßy ƒë·ªß",
            actions: []
          }
        );
        
        setStatus((s) => ({
          ...s,
          error: "Vui l√≤ng ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc.",
        }));
        return;
      }
      
      // Try API submission
      await submitViaAPI();
    },
    [botField, errors, submitViaAPI, notification]
  );

  return (
    <section id="contact" aria-labelledby="contact-title" data-section>
      <div className="section-head">
        <div>
          <h2 id="contact-title" className="section-title">
            Li√™n h·ªá
          </h2>
          <p className="section-desc">S·∫µn s√†ng cho c∆° h·ªôi h·ª£p t√°c m·ªõi ‚ú®</p>
        </div>
      </div>
      <div className="gradient-line" aria-hidden="true" />

      <div className="grid contact-layout" aria-live="polite">
        <div
          className="card main-form"
          role="form"
          aria-labelledby="form-title"
        >
          <div className="card-head">
            <h3 id="form-title" className="card-title">
              G·ª≠i tin nh·∫Øn
            </h3>
          </div>
          <form
            onSubmit={onSubmit}
            id="contactForm"
            noValidate
            aria-busy={status.sending ? "true" : "false"}
          >
            {/* Honeypot (·∫©n) */}
            <label className="visually-hidden" htmlFor="company">
              Company
            </label>
            <input
              type="text"
              id="company"
              name="company"
              value={botField}
              onChange={(e) => setBotField(e.target.value)}
              tabIndex={-1}
              autoComplete="off"
              aria-hidden="true"
              className="hp-field"
            />

            <div className="row">
              <div
                className={`field ${
                  touched.name && errors.name ? "has-error" : ""
                }`}
              >
                <label htmlFor="name">
                  H·ªç t√™n{" "}
                  <span className="req" aria-hidden="true">
                    *
                  </span>
                </label>
                <input
                  id="name"
                  name="name"
                  placeholder="VD: Nguy·ªÖn VƒÉn A"
                  value={form.name}
                  onChange={onChange}
                  onBlur={onBlur}
                  required
                  aria-invalid={touched.name && !!errors.name}
                  autoComplete="name"
                  disabled={status.sending}
                />
                {touched.name && errors.name && (
                  <p className="field-error" role="alert">
                    {errors.name}
                  </p>
                )}
              </div>
              <div
                className={`field ${
                  touched.email && errors.email ? "has-error" : ""
                }`}
              >
                <label htmlFor="email">
                  Email{" "}
                  <span className="req" aria-hidden="true">
                    *
                  </span>
                </label>
                <input
                  id="email"
                  name="email"
                  type="email"
                  placeholder="ban@example.com"
                  value={form.email}
                  onChange={onChange}
                  onBlur={onBlur}
                  required
                  inputMode="email"
                  aria-invalid={touched.email && !!errors.email}
                  autoComplete="email"
                  disabled={status.sending}
                />
                {touched.email && errors.email && (
                  <p className="field-error" role="alert">
                    {errors.email}
                  </p>
                )}
              </div>
            </div>

            <div className={`field ${
              touched.subject && errors.subject ? "has-error" : ""
            }`}>
              <label htmlFor="subject">
                Ti√™u ƒë·ªÅ <span className="muted">(t√πy ch·ªçn)</span>
              </label>
              <input
                id="subject"
                name="subject"
                placeholder="VD: H·ª£p t√°c d·ª± √°n website"
                value={form.subject}
                onChange={onChange}
                onBlur={onBlur}
                autoComplete="off"
                disabled={status.sending}
              />
              {touched.subject && errors.subject && (
                <p className="field-error" role="alert">
                  {errors.subject}
                </p>
              )}
            </div>

            <div
              className={`field ${
                touched.message && errors.message ? "has-error" : ""
              }`}
            >
              <label htmlFor="message">
                N·ªôi dung{" "}
                <span className="req" aria-hidden="true">
                  *
                </span>
              </label>
              <textarea
                id="message"
                name="message"
                placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn nhu c·∫ßu ho·∫∑c c√¢u h·ªèi c·ªßa b·∫°n..."
                value={form.message}
                onChange={onChange}
                onBlur={onBlur}
                required
                aria-invalid={touched.message && !!errors.message}
                rows={6}
                disabled={status.sending}
              />
              {touched.message && errors.message && (
                <p className="field-error" role="alert">
                  {errors.message}
                </p>
              )}
            </div>

    

            {/* General error message */}
            {status.error && !status.error.includes("15 ph√∫t") && !status.error.includes("ph√∫t n·ªØa") && (
              <div className="form-error" role="alert" style={{
                padding: "12px 16px",
                marginTop: "16px",
                backgroundColor: "#f8d7da",
                border: "1px solid #f5c6cb",
                borderRadius: "6px",
                color: "#721c24"
              }}>
                <strong>‚ùå C√≥ l·ªói x·∫£y ra</strong>
                <p style={{ margin: "4px 0 0 0", fontSize: "14px" }}>
                  {status.error}
                </p>
              </div>
            )}

            <div className="form-footer">
              <button
                className="btn primary submit-btn"
                type="submit"
                disabled={status.sending || Object.keys(errors).length > 0}
              >
                {status.sending && (
                  <span className="spinner" aria-hidden="true" />
                )}
                <span>{status.sending ? "ƒêang g·ª≠i..." : "G·ª≠i tin nh·∫Øn"}</span>
              </button>
              <p className="hint section-desc">
                Tin nh·∫Øn s·∫Ω ƒë∆∞·ª£c g·ª≠i tr·ª±c ti·∫øp ƒë·∫øn email c·ªßa t√¥i
              </p>
            </div>
          </form>
        </div>

        <aside className="card info-panel" aria-labelledby="info-title">
          <div className="card-head">
            <h3 id="info-title" className="card-title" style={{ marginTop: 0 }}>
              Th√¥ng tin
            </h3>
            <p className="section-desc contact-lines">
              <span>
                Email: <strong>{email}</strong>
              </span>
              {/* <span>LinkedIn: {info.linkedin || "/in/yourname"}</span> */}
              <span>GitHub: {info.github || "/nhdinhdev03"}</span>
            </p>
          </div>
          <div className="methods">
            <button
              type="button"
              className="btn"
              onClick={() => (window.location.href = `mailto:${email}`)}
            >
              ‚úâÔ∏è G·ª≠i email tr·ª±c ti·∫øp
            </button>
            {info.linkedin && (
              <a
                className="btn"
                href={`https://www.linkedin.com${info.linkedin}`}
                target="_blank"
                rel="noreferrer"
                aria-label="M·ªü LinkedIn"
              >
                üíº M·ªü LinkedIn
              </a>
            )}
            {info.github && (
              <a
                className="btn"
                href={`https://github.com/${info.github.replace(/^\//, "")}`}
                target="_blank"
                rel="noreferrer"
                aria-label="M·ªü GitHub"
              >
                üê±‚Äçüíª M·ªü GitHub
              </a>
            )}
            <button
              type="button"
              className="btn"
              onClick={copyEmail}
              aria-live="polite"
            >
              {copied ? "‚úÖ ƒê√£ sao ch√©p email" : "üìã Sao ch√©p email"}
            </button>
          </div>
        </aside>
      </div>
    </section>
  );
}

export default Contact;
